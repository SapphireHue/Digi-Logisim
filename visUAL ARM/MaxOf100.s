data   DCD     0xFFFF8000, 0xFFFF8001, 0xFFFF8005, 0xFFFF8004, 0x00000005, 0x00006F3F, 0x0000266F, 0xFFFFCE3D, 0x00002284, 0xFFFFA44A, 0xFFFFA753, 0x000036E0, 0xFFFFBCA4, 0x000078C3, 0x00007D30, 0x00001E28, 0x00007807, 0xFFFFB29B, 0x000052B4, 0xFFFFD755, 0xFFFF96C4, 0x00004D17, 0x00007ACF, 0xFFFFFF0F, 0x00003965, 0x00003836, 0xFFFF8B3F, 0xFFFFB1E7, 0x0000713E, 0xFFFFEFC0, 0xFFFFE5DB, 0xFFFFBF0A, 0xFFFF9630, 0xFFFFB312, 0x00002A91, 0x00001346, 0xFFFFD799, 0xFFFFC3A3, 0x00000140, 0xFFFF83D3, 0x000073DF, 0x00004D26, 0xFFFFFF83, 0x000025C1, 0x00003293, 0xFFFFAEC5, 0xFFFFCDFD, 0x00000D40, 0xFFFFC56F, 0xFFFF9595, 0xFFFF8922, 0x000029DD, 0xFFFF95B1, 0x00006425, 0x000078B0, 0xFFFFA368, 0xFFFFA740, 0x000065B5, 0xFFFFC882, 0x00007DBB, 0x00007CB7, 0x000021C1, 0xFFFFF77C, 0xFFFFA25A, 0xFFFF92E7, 0x00005381, 0x00006315, 0x000025C1, 0x000012FB, 0xFFFFEA31, 0x0000261F, 0x0000132A, 0x00006527, 0xFFFFD290, 0x0000320C, 0xFFFFD822, 0xFFFFCF0A, 0x00007B64, 0xFFFFF599, 0xFFFF936E, 0x00000DB2, 0x00006E86, 0x00006AEC, 0xFFFFCF86, 0x000041D9, 0xFFFFCD8E, 0x00005B52, 0xFFFFCA75, 0xFFFFB71E, 0xFFFF8C12, 0x00003DAD, 0xFFFFC735, 0x00001D44, 0xFFFFB312, 0xFFFFB1CA, 0x00003C86, 0xFFFF9CB2, 0xFFFF8076, 0x00000A1B, 0xFFFFBCA6
       mov     r0,#0x200 ; r0 = start data address
       add     r1,r0,#0x018C ; r1 = end data address (step pointer forward 6 words, each word is 4 bytes)
       ldr     r2,[r0] ; r2 = initial maximum

loop   ldr     r3, [r0, #4]!; r0+=1, r3 = curNum
       cmp     r3, r2;
       bmi     inc; if r3 (cur) < r2 (max), move to the next step
       mov     r2, r3; update max

inc    cmp     r0, r1
       bmi     loop; if r0 < r1, go back to top